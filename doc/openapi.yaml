openapi: 3.0.1
info:
  title: WebMarketREST
  contact:
    email: gea.viozzi@student.univaq.it
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: '0.1'
externalDocs:
  description: GitHub Repository
  url: https://github.com/jessvzz/webmarketREST
servers:
  - url: http://localhost:8080/WebMarketREST
tags:
  - name: Richiesta
    description: Operazioni su una singola richiesta
  - name: Richieste collection
    description: Operazioni sulla collection delle richieste
  - name: Richiesta properties
    description: Operazioni sulle proprietà di una singola richiesta
  - name: Proposta
    description: Operazioni su una singola proposta
  - name: Proposte collection
    description: Operazioni su una collezione di proposte
  - name: Proposte properties
    description: Operazioni sulle proprietà di una singola proposta
    
# gli esempi di payloads sono riportati all'interno dei relativi paths, gli esempi di output sono collocati alla fine del documento
paths:
  /rest/richieste:
    get:
      operationId: getRichieste
      description: >-
        trova le richieste in corso di un determinato ordinante o tecnico
      tags:
        - Richieste collection
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/userId'
          description: id dell'utente per il quale si vogliono estrarre le richieste
      responses:
        '200':
          description: richieste in corso di un determinato ordinante o tecnico
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/RichiestaOrdineList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'        
        '500':
          $ref: '#/components/responses/GeneralError'
    post:
      operationId: addRequest
      description: inserisce una nuova richiesta
      tags:
        - Richieste collection
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RichiestaOrdine'
            example:
              esempioPayload:
                summary: esempio del payload per questa post
                value:
                  note: Richiesta Urgente
                  utente:
                    id: 2
                  categoria:
                    id: 3
                  caratteristiche:
                    Sistema operativo: Windows 10
                    Memoria RAM: 16GB
                    Scheda Grafica: Intel Iris Xe
              
      responses:
        '201':
          $ref: '#/components/responses/SuccessfulInsert'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/GeneralError'
  /rest/richieste/in_attesa:
    get:
      operationId: getRichiesteInAttesa
      description: >-
        trova tutte le richieste non prese in carico da nessun tecnico
      tags:
        - Richieste collection
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista di richieste in attesa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RichiestaOrdineList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/GeneralError'
  /rest/richieste/in_corso:
    get:
      operationId: getRichiesteInCorso
      description: >-
        trova le richieste in corso di un determinato ordinante
      tags:
        - Richieste collection
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ordId'
          description: id dell'ordinante sul quale si vuole eseguire il controllo
      responses:
        '200':
          description: richieste in corso di un determinato ordinante
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RichiestaOrdineList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'        
        '500':
          $ref: '#/components/responses/GeneralError'
  /rest/richieste/gestite_da_tecnico:
    get:
      operationId: getRichiesteGestiteDa
      description: trova le richieste gestite da un determinato tecnico
      tags:
        - Richieste collection
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idtecnico'
          description: id del tecnico sul quale si vuole eseguire il controllo
      responses:
        '200':
          description: Richieste info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RichiestaOrdineList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
    
  /rest/richieste/{id}:
    parameters:
      - $ref: '#/components/parameters/RichiestaUID'
    get:
      operationId: getDettagliRichiesta
      description: dettagli di una richiesta
      tags:
        - Richiesta
      responses:
        '200':
          description: Dettagli richiesta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RichiestaOrdine'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
    
    delete:
      operationId: deleteRichiesta
      description: elimana la richiesta
      tags:
        - Richiesta
      security:
        - bearerAuth: []
      
      responses:
        '204':
          description: Richiesta eliminata con successo
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
  /rest/richieste/{id}/presa_in_carico:
    parameters:
      - $ref: '#/components/parameters/RichiestaUID'
      - $ref: '#/components/parameters/idtecnico'
        description: id del tecnico a cui si vuole assegnare una richiesta

    patch:
      operationId: prendiInCarico
      description: Consente ad un tecnico di prendere in carico una richiesta in attesa
      tags:
        - Richiesta
        - Richiesta properties
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Richiesta Modificata
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
          

    
  /rest/proposte:
    get:
      operationId: getProposte
      description: Proposte a cui ha accesso un tecnico/ordinante
      tags:
        - Proposte collection
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/userId'
          description: id dell'utente per cui si vogliono estrarre le proposte
      responses:
        '200':
          description: Lista di Proposte
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ProposteAcquistoList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
    post:
      operationId: addProposta
      description: aggiunge una nuova proposta (deve essere eseguita esclusivamente dal tecnico incaricato della richiesta)
      tags:
        - Proposte collection
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropostaAcquisto'
            example:
              esempioPayload:
                description: esempio di un payload oer questo inserimento
                value:
                  produttore: Amazon
                  prodotto: sedia ergonomica
                  codiceProdotto: feri93
                  prezzo: 10
                  url: https://www.amazon.it
                  richiestaOrdine:
                    id: 1
                  
      responses:
        '201':
          $ref: '#/components/responses/SuccessfulInsert'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/GeneralError'
  /rest/proposte/in_attesa: 
     get:
      operationId: getProposteInAttesa
      description: >-
        trova tutte le proposte in attesa (associate ad un tecnico o ad un ordinante) di essere accettate/rifiutate da un ordinante
      tags:
        - Proposte collection
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/userId'
          description: id dell'utente di qui si vogliono estrarre le proposte in attesa

      responses:
        '200':
          description: Lista di proposte in attesa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposteAcquistoList'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/GeneralError'
  
  /rest/proposte/{id}: 
     parameters: 
      - $ref: '#/components/parameters/PropostaUID'
     get:
      operationId: getProposta 
      description: trova la proposta 
      
      tags:
        - Proposta
      security:
        - bearerAuth: []
      responses:
        '200':
          description: info Proposta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropostaAcquisto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
     put:
      operationId: modificaProposta
      description: modifica la proposta (deve essere eseguita esclusivamente dal tecnico incaricato della richiesta)
      tags:
        - Proposta
        - Proposta properties
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropostaAcquistoBase'
            example:
              esempioPayload:
                description: esempio di un payload per questa modifica
                value:
                  produttore: Amazon
                  prodotto: sedia ergonomica
                  codiceProdotto: feri93
                  prezzo: 10
                  url: https://www.amazon.it
      responses:
        '204':
          description: Proposta modificata con successo
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
  /rest/proposte/{id}/approva:
    parameters: 
      - $ref: '#/components/parameters/PropostaUID'
    patch:
      operationId: approvaProposta
      description: approva la proposta  (deve essere eseguita esclusivamente dall'ordinante associato della richiesta)
      tags:
        - Proposta
        - Proposta properties
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Proposta approvata
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
  /rest/proposte/{id}/rifiuta:
    parameters: 
      - $ref: '#/components/parameters/PropostaUID'
    patch:
      operationId: rifiutaProposta
      description: rifiuta la proposta
      tags:
        - Proposta
        - Proposta properties
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                motivazione:
                  type: string
                  example: "Costo eccessivo rispetto al budget"

              required:
                - motivazione
      responses:
        '204':
          description: Rifiuta Proposta
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
  
  /rest/auth/login:
    post:
      operationId: doLogin
      description: login
      tags:
        - authentication
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login eseguito con successo, restituisce il token di autenticazione.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: "Token di autenticazione"
                    example: "abcdef12345"
                  role:
                    type: string
                    description: "Ruolo dell'utente autenticato."
                    example: "ORDINANTE"
                  userId:
                    type: integer
                    description: "ID univoco dell'utente autenticato."
                    example: 2
          headers:
            Authorization:
              schema:
                type: string
                description: "Token di autenticazione per l'accesso alle risorse protette."
                example: "Bearer abcdef12345"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/GeneralError'
  /rest/auth/logout:
    delete:
      operationId: doLogout
      description: logout
      tags:
        - authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: logout eseguito
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/GeneralError'
  /rest/auth/refresh:
    get:
      operationId: refreshToken
      description: refresha l'autorizzazione del token
      tags:
        - authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Nuovo token refreshato
          content:
            text/plain:
              schema:
                type: string
          headers:
            Authorization:
              schema:
                type: string
                pattern: Bearer [a-z0-9A-Z-]+
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/GeneralError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: internalToken
  responses:
    SuccessfulInsert:
     description: Elemento creato
     headers:
      location:
        schema:
         type: string
         format: uri
     content:
      application/json:
       schema:
        type: string
        format: uri
    BadRequest:
      description: Errore nella richiesta 
    GeneralError:
      description: Errore Interno del Server
    UnauthorizedError:
      description: Token mancante o non trovato
    NotFound:
     description: Elemento non trovato
     content:
      text/plain:
       schema:
        type: string
        example: Not found
  parameters:
    userId:
      name: userId
      in: query
      description: "id di un tecnico o di un ordinante"
      required: true
      schema:
       $ref: '#/components/schemas/id'
    ordId:
      name: ordId     
      in: query
      required: true
      description: ID dell'ordinante.
      schema:
        $ref: '#/components/schemas/id'
    idtecnico:      
      name: idtecnico     
      in: query
      required: true
      description: ID del tecnico.
      schema:
        $ref: '#/components/schemas/id'
    TecnicoUID:
      name: id
      in: path
      required: true
      schema:
       $ref: '#/components/schemas/id'
    RichiestaUID:
      name: id
      in: path
      required: true
      schema:
       $ref: '#/components/schemas/id'
    PropostaUID:
      name: id
      in: path
      required: true
      schema:
       $ref: '#/components/schemas/id'
  schemas:
    id:
      type: integer
      pattern: "[0-9]+"
      example: "123"
    Utente:
      type: object
      properties:
        id: 
          $ref: '#/components/schemas/id'
        username:
          type: string
          example: "mario"
        email:
          type: string
          format: e-mail
          example: "mario.rossi@univaq.it"
        password:
          type: string
          example: "passwordmario00"
        tipologiaUtente:
          enum:
            - ORDINANTE
            - TECNICO
      required:
        - id
        - username
        - email
        - password
        - tipologiaUtente
      additionalProperties: false
    
    RichiestaOrdineBase:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        note:
          type: string
          example: "vorrei uno smartphone non troppo costoso ma con una buona fotocamera"
        stato:
          enum:
            - IN_ATTESA
            - PRESA_IN_CARICO
            - ORDINATA
            - RISOLTA
        data:
          type: string
          format: date-time
        codiceRichiesta:
          type: string
          example: "sHeGD7kFrN"
        tecnico:
          $ref: '#/components/schemas/Utente'
        utente:
          $ref: '#/components/schemas/Utente'
        categoria:
          $ref: '#/components/schemas/Categoria'
      required:
        - id
        - note
        - stato
        - codiceRichiesta
        - data
        - utente
        - categoria
    RichiestaOrdine:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        note:
          type: string
          example: "vorrei uno smartphone non troppo costoso ma con una buona fotocamera"
        stato:
          enum:
            - IN_ATTESA
            - PRESA_IN_CARICO
            - ORDINATA
            - RISOLTA
        data:
          type: string
          format: date-time
        codiceRichiesta:
          type: string
          example: "sHeGD7kFrN"
        tecnico:
          $ref: '#/components/schemas/Utente'
        utente:
          $ref: '#/components/schemas/Utente'
        categoria:
          $ref: '#/components/schemas/Categoria'
        proposte:
          type: array
          description: Lista di proposte associate alla Richiesta in questione
          items:
            $ref: '#/components/schemas/PropostaAcquisto'
        caratteristiche:             
          type: object
          description: Una mappa di caratteristiche scelte dall'ordinante, associate alla Richiesta specifica.
          example: 
            - nome: "Sistema operativo"
            - valore: "Android"
          additionalProperties:
            type: string 
      required:
          - stato
          - data
          - utente
      additionalProperties: false
    RichiestaOrdineList: 
      type: object
      properties:
        richieste:
            type: array
            items:
              $ref: '#/components/schemas/RichiestaOrdineBase'
      additionalProperties: false
    RichiestaOrdineSoloId:
    # questo schema potrebbe risultare ridondante, è stato incluso esclusivamente per utilizzarlo nella PropostaAcquisto, dove in una post è necessario (required) solamente l'id della richiesta (ma anche altri campi possono essere inclusi)
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        note:
          type: string
          example: "vorrei uno smartphone non troppo costoso ma con una buona fotocamera"
        stato:
          enum:
            - IN_ATTESA
            - PRESA_IN_CARICO
            - ORDINATA
            - RISOLTA
        data:
          type: string
          format: date-time
        codiceRichiesta:
          type: string
          example: "sHeGD7kFrN"
        tecnico:
          $ref: '#/components/schemas/Utente'
        utente:
          $ref: '#/components/schemas/Utente'
        categoria:
          $ref: '#/components/schemas/Categoria'
      required:
        - id
    PropostaAcquisto:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        produttore:
          type: string
          example: "Lenovo"
        prodotto:
          type: string
          example: "Lenovo IdeaPad Slim 3 "
        codiceProdotto:
          type: string
          example: "LEN-UHD-27"
        codice:
          type: string
          example: "8IvYqRV3ZX"
        prezzo:
          type: number
          example: 299.99
        url:
          type: string
          example: "https://www.amazon.it/Lenovo-Slim-Full-Chromebook-Laptop"
        note:
          type: string
          example: "Schermo UHD 4K"
        stato:
          enum:
            - ACCETTATO
            - RIFIUTATO
            - IN_ATTESA
            - ORDINATO
        data:
          type: string
          format: date-time
          example: "2024-08-18"
        motivazione:
          type: string
          example: "preferirei un prodotto più performante"
        richiestaOrdine:
          $ref: '#/components/schemas/RichiestaOrdineBase'
      required:
        - produttore
        - prodotto
        - codiceProdotto
        - codice
        - prezzo
        - url
        - richiestaOrdine
      additionalProperties: false
    PropostaAcquistoBase:
      type: object
      properties:
        produttore:
          type: string
          example: "Lenovo"
        prodotto:
          type: string
          example: "Lenovo IdeaPad Slim 3 "
        codiceProdotto:
          type: string
          example: "LEN-UHD-27"
        prezzo:
          type: number
          example: 299.99
        url:
          type: string
          example: "https://www.amazon.it/Lenovo-Slim-Full-Chromebook-Laptop"
        note:
          type: string
          example: "Schermo UHD 4K"
      additionalProperties: false
      
    ProposteAcquistoList:
      type: object
      properties:
        proposte:
            type: array
            items:
              $ref: '#/components/schemas/PropostaAcquisto'
      additionalProperties: false
      
    Categoria:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        nome:
          type: string
          example: "Monitor"
        caratteristiche:
          type: array
          items:
            $ref: '#/components/schemas/Caratteristiche'
          example: 
            - id: 8
              nome: "Dimensione schermo"
              categoria_id: 6
            - id: 9
              nome: "Risoluzione"
              categoria_id: 6
      required:
          - id
          - nome    
      additionalProperties: false
    Caratteristiche:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        nome: 
          type: string
          example: "Risoluzione"
        categoria:
          $ref: '#/components/schemas/Categoria'
      required:
          - id
          - nome
          - categoria
          
  #output e payload di esempio
  examples:
   id:
      summary: esempio di id
      value:
        id: 12
   Utente:
      summary: esempio di utente
      value:
        id: 4
        username: tecnicoS
        email: tecnicoS@gmail.com
   
   RichiestaOrdineBase:
      summary: esempio di una richiesta base
      value:
        id: 12
        note: Deve essere abbastanza grande per il mio fisso, il mio pranzo e la mia borsa da lavoro
        stato: IN_ATTESA
        codiceRichiesta : 359K1yc00q
        data: 2024-09-07
        utente: 
         id: 5
         username: userOrd
         email: example@univaq.it
        tecnico:
         id: 6
         username: userTec
         email: exampleTec@univaq.it
        categoria:
         id: 3
         nome: Periferiche
         
   RichiestaOrdine:
      summary: esempio di una richiesta 
      value:
        id: 1
        note: Deve essere abbastanza grande per il mio fisso, il mio pranzo e la mia borsa da lavoro
        stato: IN_ATTESA
        codiceRichiesta: 359K1yc00q
        data: 2024-09-07
        utente:
         id: 5
         username: userOrd
         email: example@univaq.it
        tecnico:
         id: 6
         username: userTec
         email: exampleTec@univaq.it
        categoria:
         id: 3
         nome: Periferiche
        proposte: 
          - id: 1
            codice: 4dnxE6fr7u
            codiceProdotto: gvbnkmll
            note: Perfetto per ufficio
            prodotto: Notebook XPS 15
            produttore: Dell
            url: https://dell.com/notebook-xps15
            prezzo: 1500.5
            stato: ORDINATO
            data: 2024-09-03
          
        caratteristiche: 
          - nome: Sistema Op supportato
            valore: 16GB
            
          - nome: Scheda Grafica
            valore: Intel i7
   RichiestaOrdineList: 
      summary: esempio di una lista di richieste ordine 
      value:
          - id: 4
            note: Stampante multifunzione
            stato: ORDINATA
            codiceRichiesta: pJsIhQswxl
            data: 2024-07-30
            utente:
             id: 3
             username: userOrd
             email: example@univaq.it
            tecnico:
             id: 1
             username: userTec
          - id: 12
            note: vorrei delle casse per il mio pc
            stato: PRESA_IN_CARICO
            codiceRichiesta: pJsIhQswxl
            data: 2024-07-30
            utente:
             id: 2
             username: userOrd
             email: example@univaq.it
            tecnico:
             id: 6
             username: userTec
             email: exampleTec@univaq.it
            categoria:
             id: 5 
             nome: Periferiche
   PropostaAcquisto:
        summary: esempio di una proposta d'acquisto
        value:
         id: 1
         codice: 4dnxE6fr7u
         codiceProdotto: XPS-2024
         note: Perfetto per ufficio
         prodotto: Notebook XPS 15
         produttore: Dell
         url: https://dell.com/notebook-xps15
         prezzo: 1500.5
         richiestaOrdine: 
            id: 1
            note: Acquisto nuovo notebook
            stato: RISOLTA
            codiceRichiesta: 9pX1KQxOvG
            data: 2024-09-01
            utente:
                id: 2,
                username: geaviozzi
                email: geaviozzi@icloud.com
            tecnico: 
                id: 1
                username: tecnicog
                email: difgiulia@gmail.com
            categoria:
                 id: 3
                 nome: Notebook
            caratteristiche:
                - nome: Sistema Op supportato
                  valore: 16GB
                - nome: Scheda Grafica
                  valore: Intel i7
         stato: ORDINATO
         data: 2024-09-03
   PropostaAcquistoList:
        summary: esempio di una lista proposte
        value: 
        - id: 1
          codice: 4dnxE6fr7u
          codiceProdotto: XPS-2024
          note: Perfetto per ufficio
          prodotto: Notebook XPS 15
          produttore: Dell
          url: https://dell.com/notebook-xps15
          prezzo: 1500.5
          richiestaOrdine: 
            id: 1
            note: Acquisto nuovo notebook
            stato: RISOLTA
            codiceRichiesta: 9pX1KQxOvG
            data: 2024-09-01
            utente:
                id: 2,
                username: geaviozzi
                email: geaviozzi@icloud.com
            tecnico: 
                id: 1
                username: tecnicog
                email: difgiulia@gmail.com
            categoria:
                 id: 3
                 nome: Notebook
            caratteristiche:
                - nome: Sistema Op supportato
                  valore: 16GB
                - nome: Scheda Grafica
                  valore: Intel i7
          stato: ORDINATO
          data: 2024-09-03
        - id: 2
          codice: 67gfd0
          codiceProdotto: FGR-1990
          note: prodotto in offerta limitata
          prodotto: Scrivania LINNMON
          produttore: Ikea
          url: https://ikea.com/scrivania-FGR-1990
          prezzo: 89.90
          richiestaOrdine: 
              id: 2
              note: Acquisto scrivania
              stato: PRESA_IN_CARICO
              codiceRichiesta: P4zbrM2wQA
              data: 2024-08-25
              utente:
                  id: 2,
                  username: geaviozzi
                  email: geaviozzi@icloud.com
              tecnico: 
                  id: 1
                  username: tecnicog
                  email: difgiulia@gmail.com
              categoria:
                   id: 9
                   nome: Scrivanie
              caratteristiche:
                  - nome: Materiale
                    valore: Legno
                  - nome: Colore
                    valore: Bianco
          stato: IN_ATTESA
          data: 2024-09-03  

