openapi: 3.0.1
info:
  title: WebMarketREST
  contact:
    email: gea.viozzi@student.univaq.it
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: '0.1'
externalDocs:
  description: GitHub Repository
  url: https://github.com/jessvzz/webmarketREST
servers:
  - url: http://localhost:8080/WebMarketREST
tags:
  - name: Richiesta
    description: Operations on single request
  - name: Richieste collection
    description: Operations on the requests collection
  - name: Richiesta properties
    description: Operations on single request properties
  - name: Proposta
    description: Operations on single proposal
  - name: Proposte collection
    description: Operations on the proposals collection
  - name: Proposte properties
    description: Operations on single proposal properties
paths:
  /rest/richieste:
    post:
      operationId: addRequest
      description: adds a new request
      tags:
        - Richieste collection
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RichiestaOrdine'
      responses:
        '201':
          $ref: '#/components/responses/SuccessfulInsert'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/GeneralError'
  /rest/richieste/in_attesa:
    get:
      operationId: getRichiesteInAttesa
      description: >-
        trova tutte le richieste non prese in carico da nessun tecnico
      tags:
        - Richieste collection
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista di richieste in attesa
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RichiestaOrdineBase'
              example: 
               id: 5,
               note: "Acquisto sedia ergonomica"
               stato: "IN_ATTESA"
               codiceRichiesta: "52kSv6aSOQ"
               data: "2024-09-02"
               utente:
                username: "geaviozzi"
                email: "geaviozzi@icloud.com"
               categoria:
                id: 10
                nome: "Sedie"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/GeneralError'
  /rest/richieste/in_corso:
    get:
      operationId: getRichiesteInCorso
      description: >-
        trova le richieste in corso di un determinato utente
      tags:
        - Events collection
      security:
        - bearerAuth: []
      responses:
        '200':
          description: richieste in corso di un determinato utente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RichiestaOrdineBase'
        '401':
          $ref: '#/components/responses/UnauthorizedError'        
        '500':
          $ref: '#/components/responses/GeneralError'
  /rest/richieste/gestite_da_tecnico/{uid}:
    parameters:
      - $ref: '#/components/parameters/TecnicoUID'
    get:
      operationId: getRichiesteGestiteDa
      description: trova le richieste gestite da un determinato tecnico
      tags:
        - Richieste Collection
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Richieste info
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RichiestaOrdineBase'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
    
  /rest/richieste/{uid}:
    parameters:
      - $ref: '#/components/parameters/RichiestaUID'
    get:
      operationId: getRichiesta
      summary: Ottieni i dettagli di una Richiesta specifica
      description: Restituisce i dettagli di una singola `RichiestaOrdine` in base all'`idrichiesta` fornito.
      tags:
        - Richiesta
        - Richiesta properties
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Richiesta info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RichiestaOrdineBase'
              example:
                id: 21
                note: "Vorrei un mobile da studio"
                stato: "PRESA_IN_CARICO"
                codiceRichiesta: "56ghjkl90"
                utente:
                  username: "samanta"
                  email: "samanta_dis@hotmail.com"
                tecnico:
                  username: "tecnicoS"
                  email: "tecnicoS@hotmail.com"
                categoria:
                  id: 8
                  nome: "Mobili"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
    delete:
      operationId: deleteRichiesta
      description: elimana la richiesta
      tags:
        - Richiesta
      security:
        - bearerAuth: []
      
      responses:
        '204':
          description: Richiesta eliminata con successo
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
  /rest/richieste/{uid}/presa_in_carico:
    parameters:
      - $ref: '#/components/parameters/RichiestaUID'
    patch:
      operationId: prendiInCarico
      description: Consente ad un tecnico di prendere in carico una richiesta in attesa
      tags:
        - Richiesta
        - Richiesta properties
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Update Richiesta
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
          
  /rest/richieste/{uid}/dettagli:
    parameters:
      - $ref: '#/components/parameters/RichiestaUID'
    get:
      operationId: getDettagliRichiesta
      description: dettagli di una richiesta
      tags:
        - Richiesta
        - Richiesta properties
      responses:
        '200':
          description: Dettagli richiesta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RichiestaOrdine'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
    
  /rest/proposte:
    get:
      operationId: getProposte
      description: Proposte a cui ha accesso un tecnico/ordinante
      tags:
        - Proposte collection
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List di Proposte
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/ProposteAcquistoList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
    post:
      operationId: addProposta
      description: adds a new Proposta
      tags:
        - Proposte collection
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropostaAcquisto'
      responses:
        '201':
          $ref: '#/components/responses/SuccessfulInsert'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/GeneralError'
  /rest/proposte/in_attesa: 
     get:
      operationId: getProposteInAttesa
      description: >-
        trova tutte le proposte in attesa di essere accettate/rifiutate da un ordinante
      tags:
        - Proposte collection
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista di proposte in attesa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposteAcquistoList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/GeneralError'
  
  /rest/proposte/{uid}: 
     parameters: 
      - $ref: '#/components/parameters/PropostaUID'
     get:
      operationId: getProposta 
      description: trova la proposta 
      
      tags:
        - Proposta
      security:
        - bearerAuth: []
      responses:
        '200':
          description: info Proposta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropostaAcquisto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
     put:
      operationId: modificaProposta
      description: modifica la proposta
      tags:
        - Proposta
        - Proposta properties
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropostaAcquisto'
      responses:
        '204':
          description: Update Proposta
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
  /rest/proposte/{uid}/approva:
    parameters: 
      - $ref: '#/components/parameters/PropostaUID'
    patch:
      operationId: approvaProposta
      description: approva la proposta
      tags:
        - Proposta
        - Proposta properties
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Approva Proposta
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
  /rest/proposte/{uid}/rifiuta:
    parameters: 
      - $ref: '#/components/parameters/PropostaUID'
    patch:
      operationId: rifiutaProposta
      description: rifiuta la proposta
      tags:
        - Proposta
        - Proposta properties
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                motivazione:
                  type: string
      responses:
        '204':
          description: Rifiuta Proposta
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
  
  /rest/auth/login:
    post:
      operationId: doLogin
      description: >-
        performs the login by sending the username/password pair and receiving
        an authorization token
      tags:
        - authentication
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful login
          content:
            text/plain:
              schema:
                type: string
          headers:
            Authorization:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    pattern: Bearer [a-z0-9A-Z-]+
                  role:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/GeneralError'
  /rest/auth/logout:
    delete:
      operationId: doLogout
      description: performs the logout
      tags:
        - authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful logout
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/GeneralError'
  /rest/auth/refresh:
    get:
      operationId: refreshToken
      description: refreshes the current authorization token
      tags:
        - authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: New (refreshed) token
          content:
            text/plain:
              schema:
                type: string
          headers:
            Authorization:
              schema:
                type: string
                pattern: Bearer [a-z0-9A-Z-]+
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/GeneralError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: internalToken
  responses:
    SuccessfulInsert:
     description: Elemento creato
     headers:
      location:
        schema:
         type: string
         format: uri
     content:
      application/json:
       schema:
        type: string
        format: uri
    BadRequest:
      description: Errore nella richiesta 
    GeneralError:
      description: Errore Interno del Server
    UnauthorizedError:
      description: Token mancante o non trovato
    NotFound:
     description: Elemento non trovato
     content:
      text/plain:
       schema:
        type: string
        example: Not found
  parameters:
    TecnicoUID:
      name: uid
      in: path
      required: true
      schema:
       $ref: '#/components/schemas/uid'
    RichiestaUID:
      name: uid
      in: path
      required: true
      schema:
       $ref: '#/components/schemas/uid'
    PropostaUID:
      name: uid
      in: path
      required: true
      schema:
       $ref: '#/components/schemas/uid'
  schemas:
    uid:
      type: integer
      pattern: "[0-9]+"
    Utente:
      type: object
      properties:
        uid: 
          $ref: '#/components/schemas/uid'
        username:
          type: string
        email:
          type: string
          format: e-mail
        password:
          type: string
        tipologiaUtente:
          enum:
            - ORDINANTE
            - TECNICO
      required:
        - uid
        - username
        - email
        - password
        - tipologiaUtente
      additionalProperties: false
    PropostaAcquisto:
      type: object
      properties:
        uid:
          $ref: '#/components/schemas/uid'
        produttore:
          type: string
        prodotto:
          type: string
        codiceProdotto:
          type: string
        codice:
          type: string
        prezzo:
          type: number
        url:
          type: string
        note:
          type: string
        stato:
          enum:
            - ACCETTATO
            - RIFIUTATO
            - IN_ATTESA
            - ORDINATO
        data:
          type: string
          format: date-time
        motivazione:
          type: string
        richiestaOrdine:
          $ref: '#/components/schemas/RichiestaOrdine'
      required:
        - uid
        - produttore
        - prodotto
        - codiceProdotto
        - codice
        - prezzo
        - url
        - stato
        - data
        - richiestaOrdine
      additionalProperties: false
    RichiestaOrdineBase:
      type: object
      properties:
        uid:
          $ref: '#/components/schemas/uid'
        note:
          type: string
        stato:
          enum:
            - IN_ATTESA
            - PRESA_IN_CARICO
            - ORDINATA
            - RISOLTA
        data:
          type: string
          format: date-time
        codiceRichiesta:
          type: string
        tecnico:
          $ref: '#/components/schemas/Utente'
        utente:
          $ref: '#/components/schemas/Utente'
        categoria:
          $ref: '#/components/schemas/Categoria'
    RichiestaOrdine:
      type: object
      properties:
        richiesta:
          $ref: '#/components/schemas/RichiestaOrdineBase'
        proposte:
          type: array
          description: Lista di proposte associate alla Richiesta in questione
          items:
            $ref: '#/components/schemas/PropostaAcquisto'
        caratteristiche:             
          type: object
          description: Una mappa di caratteristiche scelte dall'ordinante, associate alla Richiesta specifica.
          additionalProperties:
            type: string 
      required:
          - uid
          - stato
          - data
      additionalProperties: false
    RichiestaOrdineList:
      type: object
      properties:
        richieste:
            type: array
            items:
              $ref: '#/components/schemas/RichiestaOrdine'
      additionalProperties: false

    ProposteAcquistoList:
      type: object
      properties:
        proposte:
            type: array
            items:
              $ref: '#/components/schemas/PropostaAcquisto'
      additionalProperties: false
      
    Categoria:
      type: object
      properties:
        uid:
          $ref: '#/components/schemas/uid'
        nome:
          type: string
        caratteristiche:
          type: array
          items:
            $ref: '#/components/schemas/Caratteristiche'
      required:
          - uid
          - nome    
      additionalProperties: false
    Caratteristiche:
      type: object
      properties:
        uid:
          $ref: '#/components/schemas/uid'
        nome: 
          type: string
        categoria:
          $ref: '#/components/schemas/Categoria'
      required:
          - uid
          - nome
          - categoria